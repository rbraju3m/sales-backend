<?php

namespace Modules\Production\App\Repositories;

use Appstore\Bundle\TallyBundle\Entity\Damage;
use Doctrine\ORM\EntityRepository;
use Modules\Core\App\Entities\Warehouse;
use Modules\Inventory\App\Entities\StockItem;
use Modules\Production\App\Entities\Config;
use Modules\Production\App\Entities\ProductionElement;
use Modules\Production\App\Entities\ProductionItem;
use Modules\Production\App\Entities\ProductionItemAmendment;
use Modules\Production\App\Entities\ProductionStock;
use Modules\Production\App\Entities\ProductionValueAdded;

/**
 * ProductionItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionItemRepository extends EntityRepository
{

    public function findProductions(Production $config)
    {
        $qb = $this->createQueryBuilder('pi');
        $qb->andWhere("pi.status = 1");
        $qb->andWhere("pi.isDelete IS NULL")->orWhere("pi.isDelete = 0");
        $qb->orderBy('pi.name','ASC');
        $result = $qb->getQuery()->getResult();
        return  $result;
    }

    public function findProducts(Production $config)
    {
        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.item','item');
        $qb->join('item.masterItem','mi');
        $qb->leftJoin('mi.taxTariff','tt');
        $qb->leftJoin('mi.productGroup','g');
        $qb->leftJoin('item.unit','u');
        $qb->select('pi.id as id','item.name as name','u.name as uom','mi.hsCode as hsCode','tt.name as hsName');
        $qb->where("pi.config = :config")->setParameter('config', $config->getId());
        $qb->andWhere("pi.process = :process")->setParameter('process', 'approved');
        $qb->andWhere("pi.status = 1");
        $qb->andWhere("pi.isDelete IS NULL")->orWhere("pi.isDelete = 0");
        $qb->orderBy('pi.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function insertUpdate($config,$item,$warehouse)
    {

        $em = $this->_em;
        $config = $em->getRepository(Config::class)->find($config);
        $stockItem = $em->getRepository(StockItem::class)->find($item);
        $stockItem = $em->getRepository(Warehouse::class)->find($warehouse);
        $stock =  $this->findOneBy(array('item'=> $item));
        if($stock){
         $entity = $stock;
        }else{
         $entity = new ProductionItem();
        }
        $entity->setItem($stockItem);
        $entity->setWearhouse($stockItem);
        $entity->setConfig($config);
        $entity->setStatus(1);
        $em->persist($entity);
        $em->flush();
        return $entity->getId();
    }

    public function updateProductionProcess(ProductionItemAmendment $amendment)
    {

        $i = 1;
        $em = $this->_em;
        $qb = $em->createQueryBuilder();
        $qb->update('TerminalbdProductionBundle:ProductionValueAdded', 'e')
            ->set('e.productionItem','NULL')
            ->where('e.productionItem = :id')
            ->setParameter('id', $amendment->getProductionItem()->getId())
            ->getQuery()
            ->execute();

        $qb->update('TerminalbdProductionBundle:ProductionElement', 'e')
            ->set('e.productionItem','NULL')
            ->where('e.productionItem = :id')
            ->setParameter('id', $amendment->getProductionItem()->getId())
            ->getQuery()
            ->execute();

        $em = $this->_em;
        if($amendment->getElements()) {

            /* @var $entity ProductionElement */

            foreach ($amendment->getElements() as $entity):
                $entity->setProductionItem($amendment->getProductionItem());
                $em->persist($entity);
                $em->flush();
            endforeach;
        }

        $em = $this->_em;
        if($amendment->getProductionValueAddeds()) {
            /* @var $entity ProductionValueAdded */
            foreach ($amendment->getProductionValueAddeds() as $entity):
                $entity->setProductionItem($amendment->getProductionItem());
                $em->persist($entity);
                $em->flush();
            endforeach;
        }

        $productionItem = $amendment->getProductionItem();
        $productionItem->setSubTotal($amendment->getSubTotal());
        $productionItem->setQuantity($amendment->getQuantity());
        $productionItem->setWasteAmount($amendment->getWasteAmount());
        $productionItem->setWastePercent($amendment->getWastePercent());
        $productionItem->setMaterialQuantity($amendment->getMaterialQuantity());
        $productionItem->setWasteMaterialQuantity($amendment->getWasteMaterialQuantity());
        $productionItem->setMaterialAmount($amendment->getMaterialAmount());
        $productionItem->setValueAddedAmount($amendment->getValueAddedAmount());
        $em->persist($productionItem);
        $em->flush();
        $em->getRepository('TerminalbdInventoryBundle:Item')->productionPriceUpdated($productionItem);
    }

}
